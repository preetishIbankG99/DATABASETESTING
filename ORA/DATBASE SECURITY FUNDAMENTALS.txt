DATBASE SECURITY
================
-The security upon database is applied by defining and describing separate schema
objects and granting required privileges upon them.
-In oracle the privileges can be granted as well as revoked.
GRANT COMMAND
=============
syntax::sql>GRANT<PrivilageName1>,<PrivilageName2>,ON<ObjectName>TO<UserName>;

GRANT command is used when we want the database to be shared with other users
This command can be issued not only on Table Object,but also on VIEWS,SYNONYMS,INDEXES,SEQUENCES
GRANT SELECT ON EMP TO ENDUSERS;
GRANT INSERT(Empno,Ename,Job) ON Emp To EndUsers;

REVOKE COMMAND
==============
SYNTAX
======
sql>REVOKE<PrivilegeName1>,<PrivilegeName2>,ON<ObjectName>FROm<UserName>;

-revoke is used when we want one database to stop sharing the information with other users
- IT IS ASSIGNED NOT ONLY ON TABLE OBJECT BUT ALSO ON VIEWS,SYNONYMS,INDEXES Etc.
SQl>REVOKE INSERT,DELETE ON EMP FROM Operators;
-TWO TYPE OF PRIVILEGES A)SYSTEM PRIVIEGE B)OBJECT PRIVILEGE

CHECKING THE OBJECT PRIVILEGES GRANTED
======================================
THE SCHEMA OBJECT THAT STORES THE INFORMATION ABOUT THE PRIVILEGES GRANTED IS USER_TAB_PRIVS_MADE
>the column of USER_TAB_PRIVS_MADE
+GRANTEE
+TABLE_NAME
+GRANTOR
+PRIVILEGE
+GRANTABLE
+HIERARCHY
SELECT GRANTEE,TABLE_NAME"Table",GRANTOR,PRIVILEGE FROM USER_TAB_PRIVS_MADE;

CHECKING OBJECT PRIVILEGES RECEIVED
===================================
THE SCHEMA OBJECT THAT STORES THE INFORMATION ABOUT THE PRIVILEGES THAT ARE RECEIVED IS USER_TAB_PRIVS_RECD
>The columns of USER_TAB_PRIVS_RECD
+OWNER
+TABLE_NAME
+GRANTOR
+PRIVILEGE
+GRANTABLE
+HIERARCHY
SELECT OWNER,TABLE_NAME"Table",GRANTOR,PRIVILEGE FROM USER_TAB_PRIVS_RECD;
MAKING USE OF OBJECT PRIVILEGES
===============================
*ONCE A PARTI CULAR USER HAS BEEN GRANTED AN OBJECT PRIVILEGE,THE SPECIFIC USER CAN PERFORM THE TASKS AS GRANTED BY THE PRIVILEGE
SQL>SELECT*FROM SCOTT.EMP;
WORKING WITH ROLE
==================
A  ROLE IS A GROUP  OF PRIVILEGES THAT CAN BE ASSIGNED TO A USER OR ANOTHER ROLE
SYNTAX::
========
CREATE ROLE<RoleName>[IDENTIFIED BY<Password>];
CREATE ROLE Sales_Manager IDENTIFIED BY SalesAudit;

GRANTING PRIVILEGES TO ROLE
===========================
GRANT SELECT,INSERT,UPDATE,DELETE ON EMP TO Sales_Manager;

GRANTING A ROLE TO A USER
=========================
GRANT Sales_Manager TO SCOTT;

GRANTING MULTIPLE ROLES TO ANOTHER ROLE
=======================================
GRANT ROLE1,ROLE2,...TO<TARGET_ROLE_NAME>;

CHECKING ROLES GRANTED TO A USER
================================
THE COLUMNS OF USER_ROLE_PRIVS
*USERNAME
*GRANTED_ROLE
*ADMIN_OPTION
*DEFAULT_ROLE
*OS_GRANTED
SELECT USERNAME,GRANTED_ROLE FROM USER_ROLE_PRIVS;

SYSTEM PRIVILEGES GRANTED TO A ROLE
-------------------------------------
THE COLUMN OF ROLE_SYS_PRIVS
*ROLE
*PRIVILEGE
*ADMIN_OPTION
SELECT ROLE,PRIVILEGE FROM ROLE_SYS_PRIVS;
 OBJECT PRIVILEGES GRANTED TO A ROLE
------------------------------------
THE COLUMN OF ROLE_TAB_PRIVS
*ROLE
*OWNER
*TABLE_NAME
*COLUMN _NAME
*PRIVILEGE
*GRANTABLE
SELECT ROLE,PRIVILEGE FROM ROLE_TAB_PRIVS;

REVOKING A ROLE
---------------
REVOKE sales_Manager FROM SCOTT;

REVOKING ALL PRIVILEGES FROM A ROLE
------------------------------------
REVOKE ALL ON Emp FROM Sales_Manager;

DROPPING A ROLE
================
SYNTAX
------
DROP ROLE<RoleName>;
DROP ROLE Sales_Manager;

SYNONYMS
=========
A SYNONYM IS A SCHEMA OBJECT WHICH ACTS AS A N ALTERNATE NAME FOR AN EXISTING SCHEMA OBJECT
 SYNTAX::CREATE[PUBLIC]SYNONYM<SynonymName>FOR<SchemaName><ObjectName>;

ex::CREATE SYNONYM EMPInfo FOR SCOTT.Emp;
 A)public synonym
 B)private synonym
CREATE PUBLIC SYNONYM EmpInfo FOR SCOTT.Emp;
 DROPPING A SYNONYM
++++++++++++++++++++
DROP[PUBLIC]SYNONYM<SynonymName>;
ex::DROP SYNONYM EmpInfo;




