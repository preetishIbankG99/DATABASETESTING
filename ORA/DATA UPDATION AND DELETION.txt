UPDATE TABLE SYNTAX
====================
UPDATE<TABLE_NAME>SET<SPECIFICATION>WHERE CLAUSE;

EX::UPDATE EMP SET Comm=NULL WHERE Job='CLERK';

EX::UPDATE EMP SET(JOB,DEPTNO)=(SELECT JOB,DEPTNO FROM EMP
WHERE EMPNO=7499)WHERE EMPNO=7698;

EX::UPDATE EMP SET DEPTNO=(SELECT DEPTNO FROM EMP WHERE EMPNO=7788)
WHERE JOB=(SELECT JOB FROM EMP WHERE EMPNO=7788);

APPLYING DEFAULT VALUES
------------------------
IT IS USED TO UPDATE A VALUE IN A COLUMN WITH DEFAULT VALUES SET IN THE CONSTRAINTS.

EX-UPDATE EMP SET SAL=DEFAULT WHERE ENAME='SMITH';
EX-UPDATE EMP SET HIREDATE=DEFAULT WHERE ENAME='TAYLOR';

RETURNING CLAUSE
-----------------
IT IS USED TO RETURN A VALUE FROM A AGGREGATE FUNCTION.IT IS INTRODUCED FORM 10G
 RESTRICTION
=============
-each expression must be a simle expression or a single set aggregate function
-it can't be specified for multi table insert.
-it can't be used to retrieve long types.

SQL>VARIABLE SumSal NUMBER
SQL>UPDATE EMP SET SAL=SAL*1.1 WHERE DEPTNO=10 RETURNING SUM(SAL) INTO:SUMSAL;
SQL>PRINT SUMSAL;

MERGE STATEMENT
===============
-THE MERGE STATEMENT IS USED TO SELECT ROWS FROM ONE OR MORE SOURCES FOR UPDATE OR INSERT INTO
ONE OR MORE TABLES.
-THE MERGE STATEMENT IS CONVENIENT TO COMBINE MULTIPLE OPERATION AND AVOID MULTIPLE INSERT,UPDATE
AND DELETE
-MERGE IS A DETEMINISTIC STATEMENT,USING WHICH THE SAME ROW OF THE TARGET TABLE CAN BE TRANSACTED MULTIPLE
TIMES IN THE SAME MERGE STATEMENT.

EX::CREATE TABLE MYBONUS(EMPNO NUMBER,BONUS NUMBER DEFAULT 100);

EX::INSERT INTO MYBONUS(EMPNO)(SELECT E.EMPNO FROM EMP E WHERE JOB='SALESMAN');

EX::MERGE INTO MYBONUS B USING(SELECT EMPNO,SAL,DEPTNO FROM EMP
WHERE DEPTNO=30)S ON(B.EMPNO=S.EMPNO)
WHEN MATCHED THEN UPDATE SET B.BONUS=BONUS+S.SAL*0.1 DELETE WHERE(S.SAL>400)
WHEN NOT MATCHED THEN INSERT(B.EMPNO,B.BONUS)VALUES(S.EMPNO,S.SAL*0.1)WHERE(S.SAL<=4000);

SQL>CREATE TABLE EXAMTIME TABLE(EXAMNAME VARCHAR2(30),
EXAM TIME VARCHAR2(12),CONSTRAINT EXAMNAMEPK
PRIMARY KEY(EXAMNAME);

SQL>INSERT INTO EXAMTIME TABLE VALUES('PHYSICAL SCIENCES','9:00 AM');

SQL>MERGE INTO EXAM TIME TABLE E1
USING EXAMTIME TABLE E2
ON(E2.EXAMNAME=E1.EXAMNAME AND E1.EXAMNAME='PHYSICAL SCIENCES')
WHEN MATCHED THEN
UPDATE SET E1.EXAMTIME='10:30 AM'
WHEN NOT MATCHED THEN
INSERT(E1.EXAMNAME,E1.EXAMTIME)VALUES('PHYSICS SCIENCES','10:30 AM');

SQL>MERGE INTO EXAMTIME TABLE E1 USING EXAMTIME TABLE E2
ON(E2.EXAMNAME=E1.EXAMNAME AND E1.EXAMNAME='CHEMICAL SCIENCES')
WHEN MATCHED THEN
UPDATE SET E1.EXAMTIME='12:30 PM'
WHEN NOT MATCHED THEN
INSERT(E1.EXAMNAME,E1.EXAMTIME)VALUES('CHEMICAL SCIENCES','12:30 PM');

DELETE STATEMENT
------------------
-IT IS USED TO REMOVE ROWS FROM
-AN UN PARTITIONED OR PARTITIONED TABLE
-THE UN PARTITIONED OR PARTITIONED BASE TABLE OF A VIEW
SYNTAX
======
SQL>DELETE[FROM]<TABLE_NAME>[WHERE CONDITION];

USING RETURNING CLAUSE
======================
SQL>DELETE FROM EMP WHERE EMPNO=7864;
SQL>DELETE FROM EMP WHERE DEPTNO=20;
SQL>DELETE FROM EMP WHERE DEPTNO=(SELECT DEPTNO FROM DEPT WHERE DNAME='SALES');
SQL>VARIABLE SALARY NUMBER;
SQL>DELETE FROM EMP WHERE JOB='SALESMAN'AND HIREDATE<SYSDATE RETURNING SUM(SAL)INTO:SALARY;
SQL>PRINT:SALARY;
ROLLING BACK CHANGES TO SAVE POINT
==================================
SQL>ROLLBACK TO <SAVEPOINTNAME>;

ALTERTING THE TABLE DEFINITION
==============================
SYNTAX FOR ADDING COLUMN
-------------------------
SQL>ALTER TABLE<TABLE_NAME>ADD(COLUMNNAME DATATYPE[DEFAULT EXP],COLUMNNAME DATATYPE]...);

SYNTAX FOR MODIFYING COLUMN
---------------------------
SQL>ALTER TABLE<TABLENAME>MODIFY9(COLUMNNAME DATATYPE[DEFAULT EXP],COLUMN DATATYPE]...);

ADDING A COLUMN TO A TABLE
---------------------------
SQL>ALTER TABLE DEPT30 ADD(JOB VARCHAR2(9));

GUIDELINES TO DROP A COLUMN
============================
SQL>ALTER TABLE DEPT30 DROP COLUMN JOB;

SET UNUSED OPTION
=================
SQL>ALTER TABLE DEPT30 SET UNUSED(ENAME);

DROP UNUSED COLUMN OPTION
==========================
SQL>ALTER TABLE DEPT30 DROP UNUSED COLUMNS;

DROPPING A TABLE
-----------------
IT REMOVES THE DEFINITION OF THE ORACLE TABLE

SYNTAX
======
SQL>DROP TABLE<TABLENAME>[CASCADE CONSTRAINTS];
SQL>DROP TABLE DEPT30 CASCADE CONSTRAINTS;

CHANGING THE NAME OF AN OBJECT
==============================
THE RENAME COMMAND CAN BE USED TO CHANGE THE NAME OF A
-TABLE
-VIEW
-SEQUENCE
-SYNONYM
TO RENAME THE OBJ WE MUST BE THE OWNER OF THE OBJ
SYNTAX
------
SQL>RENAME<OLDNAME>TO<NEWNAME>;

EX::RENAME DEPT TO DEPARTMENT;

TRUNCATING A TABLE
====================
IT IS USED TO REMOVE ALL ROWS FROM A TABLE AND TO RELEASE THE STORAGE SPACE USED BY THE SPECIFIC TABLE
-THE TRUNCATE TABLE WILL NOT FACILITATE FOR ROLLBACK
SYNTAX
======
SQL>TRUNCATE TABLE<TABLENAME>;
EX::SQL>TRUNCATE TABLE DEPARTMENT;

APPLYING COMMENTS UPON A TABLE
==============================
THE COMMENTS COMMAND IS  USED TO ADD COMMENTS TO A TABLE OR A COLUMN OR VIEW ETC
-THE DATA DICTIONARY IN WHICH COMMENTS ARE STORED ARE...
+ALL_COL_COMMENTS
+USER_COL_COMMENTS
+ALL_TAB_COMMENTS
+USER_TAB_COMMENTS

SYNTAX
=======
SQL>COMMENT ON TABLE<TABLENAME>/COLUMN<TABLE.COLUMN>IS'TEXT';
EX::SQL>COMMENT ON TABLE EMP IS'THE TABLE STORING EMPLOYEE INFORMATION';
SQL>COMMENT ON COLUMN EMP.MGR IS
'THIS COLUMN IS ACTUALLY STORING THE REGISTERED EMPLOYEE NUMBERS AS MANAGER NUMBERS,WITH A SELF RELATION';
DROPPING A COMMENT
------------------
*A COMMENT IS DROPPED FROM THE DATBASE BY SETTING IT TO AN EMPTY STRING.
SQL>COMMENT ON TABLE EMP IS'';

CREATING A TABLE FROM AN EXISTING TABLE ON FLY TABLES
=====================================================
SYNTAX::CREATE TABLE<TABLENAME>AS SELECT COLUMNS FROM TABLENAME;[WHERE CONDITION];
 CREATING AN EXACT COPY
-----------------------
SQL>CREATE TABLE SAMPDEPT AS SELECT*FROM DEPT;

CREATING AN EXACT COPY WITH DIFFERENT COLUMN NAMES
--------------------------------------------------
SQL>CREATE TABLE SAMPDEPT1(DEPTID,DEPTNAME,PLACE)AS SELECT*FROM DEPT;

CREATING A COPY WITH REQUIRED COLUMNS
=====================================
SQL>CREATE TABLE SAMPDEPT3 AS SELECT DEPTNO,DNAME FROM DEPT;

CREATING A COPY WITH REQUIRED COLUMNS
-------------------------------------
CREATE TABLE SAMPDEPT3(DEPTID,DEPTNAME)AS SELECT DEPTNO,DNAME FROM DEPT;

CREATING A COPY WITH INVENTED COLUMNS
-------------------------------------
SQL>CREATE TABLE SAMPDEPT3(DEPTID,DEPTNAME,DEPTBUDGET)AS SELECT D.DEPTNO,
D.DNAME,SUM(E.SAL)FROM EMP E,DEPT D WHERE E.DEPTNO=D.DEPTNO
GROUP BY D.DEPTNO,D.DNAME;

CREATING A COPY WITHOUT DATA
=============================
SQL>CREATE TABLE SAMPDEPT3 AS SELECT*FROM DEPT WHERE 1=2;

CREATING A TABLE WITHOUT GENERATING REDO LOG ENTRIES
====================================================
-THE REDO LOG ENTRIES GENERATION CAN BE AVOIDED BY USING THE NOLOGGING KEYWORD.
-THE REDO LOG FILES  ARE USED TO RECOVER THE DATABASE.
SQL>CREATE TABLE SAMPDEPT NOLOGGING AS SELECT*FROM EMP;
CREATING INDEX ORGANIZED TABLE
-------------------------------
SQL>CREATE TABLE SAMPLE(SAMPID NUMBER(4),SAMPNAME VARCHAR2(20),
SAMPDATE DATE,CONSTRAINT SAMPIDSAMPNAMEPK
PRIMARY KEY(SAMPID,SAMPNAME))ORGANIZATION INDEX;








